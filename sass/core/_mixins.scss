//
// Mixins
// --------------------------------------------------
// Clearfix
@mixin clearFix() {
  &:before,
  &:after {
    content: " "; 
    display: table;
  }
  &:after {
    clear: both;
  }
}

// Display flex
@mixin displayFlex() {
  display: -webkit-flex;
  display: flex;
}

// Display inline flex
@mixin displayInlineFlex() {
  display: -webkit-inline-flex;
  display: inline-flex;
}

// Flex direction
@mixin flexDirection($direction) {
  -webkit-flex-direction: $direction;
  flex-direction: $direction;
}

// Flex grow
@mixin flexGrow($grow) {
  flex-grow: $grow;
}

// Justify content
@mixin justifyContent($justify) {
  -webkit-justify-content: $justify;
  justify-content: $justify;
}

// Align content
@mixin alignContent($align) {
  -webkit-align-content: $align;
  align-content: $align;
}

// Align items
@mixin alignItems($align) {
  -webkit-align-items: $align;
  align-items: $align;
}

// Flex flow
@mixin flexFlow($flow) {
  -webkit-flex-flow: $flow;
  flex-flow: $flow;
}

// Flex wrap
@mixin flexWrap($wrap) {
  -webkit-flex-wrap: $wrap;
  flex-wrap: $wrap;
}

// Flex basis
@mixin flexBasis($basis) {
  -webkit-flex-basis: $basis;
  flex-basis: $basis;
}

// Border radius
@mixin borderRadius($radius) {
  -webkit-border-radius: $radius;
  -moz-border-radius: $radius;
  border-radius: $radius;
}

// Border radius with values
@mixin borderRadiusVal($top-left, $top-right, $bottom-right, $bottom-left) {
  -webkit-border-radius: $top-left $top-right $bottom-right $bottom-left;
  -moz-border-radius: $top-left $top-right $bottom-right $bottom-left;
  border-radius: $top-left $top-right $bottom-right $bottom-left;
}

// Shadow
@mixin boxShadow($param) {
  -webkit-box-shadow: $param;
  -moz-box-shadow: $param;
  box-shadow: $param;
}

// Shadow
@mixin backgroundSize($param) {
  -webkit-background-size: $param;
  -moz-background-size: $param;
  -o-background-size: $param;
  background-size: $param;
}

// Placeholder
@mixin placeholder($color) {
  ::-webkit-input-placeholder {
    color: $color;
    font-style: italic;
  }

  :-moz-placeholder {
    color: $color;
    font-style: italic;
    opacity: 1;
  }

  ::-moz-placeholder {
    color: $color;
    font-style: italic;
    opacity: 1;
  }

  :-ms-input-placeholder {
    color: $color;
    font-style: italic;
  }

  ::-ms-input-placeholder {
    /* Microsoft Edge */
    color: $color;
    font-style: italic;
  }

  ::placeholder {
    color: $color;
    font-style: italic;
  }
}

// Progress
@mixin progress($progress-bcg-color, $progress-color) {
  &::-webkit-progress-bar {
    background-color: $progress-bcg-color;
  }

  &::-webkit-progress-value {
    background: $progress-color;
  }

  &::-moz-progress-bar {
    background: $progress-color;
  }
}

// Checkbox scale
@mixin checkboxScale($scale, $spacing) {
  -ms-transform: scale($scale);
  /* IE */
  -moz-transform: scale($scale);
  /* FF */
  -webkit-transform: scale($scale);
  /* Safari and Chrome */
  -o-transform: scale($scale);
  /* Opera */
  padding: $spacing;
  margin: 0 $spacing/2 0;
}

// Radio scale
@mixin radioScale($scale, $spacing) {
  transform: scale($scale, $scale);
  -moz-transform: scale($scale, $scale);
  -ms-transform: scale($scale, $scale);
  -webkit-transform: scale($scale, $scale);
  -o-transform: scale($scale, $scale);
  padding: $spacing;
  margin: 0 $spacing 0;
}

// Truncate string with ellipsis
@mixin truncateString($width) {
  width: $width;
  white-space: nowrap;
  /* force single line */
  overflow: hidden;
  /* don't show excess chars */
  text-overflow: ellipsis;
  -o-text-overflow: ellipsis;
  /* Opera */
}



// Media queries - min
@mixin mqMin($min) {
  @media only screen and (min-width: $min) {
    @content;
  }
}

// Media queries - max
@mixin mqMax($max) {
  @media only screen and (max-width: $max) {
    @content;
  }
}

// Create gird cols clasess
@mixin gridColClasses($modifier, $cols,$gutter: 0,$class_name:'.col') {
  @for $i from 1 through $cols {
    #{$class_name}#{$modifier}-#{$i} {
      $width: (100 / ($cols / $i)) * 1%;
      @if $gutter != 0 {
        @include flexBasis(unquote("calc( #{$width} - #{$gutter} )"));
      }@else {
        @include flexBasis($width);
      }
     
      // @include flexBasis(unquote("calc( #{$width} - #{$gutter} )"));
     // @include flexBasis($width);
    }
  }
}

// Generate child col classes
@mixin generateChildColClasses($modifier, $cols,$gutter: 0,$class_name:'.child-cols') {
  @for $i from 1 through $cols {
    #{$class_name}#{$modifier}-#{$i} {
      $width: ((100 /$i) * 1%);
      >* {
        @if $gutter != 0{
          width: unquote("calc( #{$width} - #{$gutter} )");
        }@else {
          width: $width;
        }
       
      }
    }
  }
}

// Create element width classes
@mixin generateWidthClasses($modifier, $cols, $class_name:'.w') {
  @for $i from 1 through $cols{
    $iletter: $i*10;
    #{$class_name}#{$modifier}-#{$iletter} {
     //@debug $i;
     width: $i*10%;

    }
  }
  #{$class_name}#{$modifier}-25 {
    width: 25%;

   }
   #{$class_name}#{$modifier}-33 {
    width: 33.33333%;

   }
   #{$class_name}#{$modifier}-75 {
    width: 75%;

   }


}